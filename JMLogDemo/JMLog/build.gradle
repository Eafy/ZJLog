apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

def JMLog_Version_Value = "1.0.1"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"


    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName JMLog_Version_Value

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -frtti -fexceptions"
                arguments '-DANDROID_TOOLCHAIN=clang'
                arguments '-DANDROID_STL=c++_static'
            }
        }

        ndk {
            abiFilters "armeabi-v7a"
            abiFilters "arm64-v8a"
            abiFilters "x86"
        }
        dataBinding {
            enabled true
        }
        lintOptions {
            abortOnError false
        }
    }

    sourceSets.main {
        jniLibs.srcDirs = ['libs']
        jni.srcDirs = []
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'de.mindpipe.android:android-logging-log4j:1.0.3'
    implementation 'log4j:log4j:1.2.17'
}

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

def siteUrl ='https://github.com/JimiPlatform/JMLog'
def gitUrl ='https://github.com/JimiPlatform/JMLog.git'
group = "com.jimi.jmlog"

def libName = "JMLog"
version = JMLog_Version_Value

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    options.encoding "UTF-8"
    options.charSet 'UTF-8'
    options.author true
    options.version true
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier ='javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'Log redirection output tool for Android, support for c、c++、m、mm code files.'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'eafy'
                        name 'jason'
                        email 'lizhijian_21@163.com'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")   //读取 local.properties 文件里面的bintray.user
    key = properties.getProperty("bintray.apikey")  //读取 local.properties 文件里面的bintray.apikey
    configurations = ['archives']

    pkg {
        repo = "maven"
        name = libName    //发布到JCenter上的项目名字，必须填写
        desc = 'Log redirection output tool for Android, support for c、c++、m、mm code files.'    //项目描述
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

//********************************************
//      本地编译发布
//********************************************

def sdkDestinationPath = "build"
def zipFile = file('build/intermediates/packaged-classes/debug/classes.jar')

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + libName + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
    from fileTree(dir: 'src/main',includes: ['assets/**'])//将assets目录打入jar包
    baseName = libName
    destinationDir = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)